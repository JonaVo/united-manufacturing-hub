# Default values for factorycube-server.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

### mqtt-to-postresql ###
mqtttopostgresql:
  image: unitedmanufacturinghub/mqtttopostgresql
  # Only specify tag if you want to use a specific version. If not specified the latest stable version is automatically selected
  # tag: 0.3.2
  storageRequest: 1Gi
  pdb:
    enabled: true
    minAvailable: 1

### nodered ###

nodered:
  enabled: true
  tag: 1.2.9
  port: 1880
  storageRequest: 1Gi
  timezone: Berlin/Europe
  settings: |-  
    module.exports = {
        // the tcp port that the Node-RED web server is listening on
        uiPort: process.env.PORT || 1880,
        // By default, the Node-RED UI accepts connections on all IPv4 interfaces.
        // To listen on all IPv6 addresses, set uiHost to "::",
        // The following property can be used to listen on a specific interface. For
        // example, the following would only allow connections from the local machine.
        //uiHost: "127.0.0.1",
        // Retry time in milliseconds for MQTT connections
        mqttReconnectTime: 15000,
        // Retry time in milliseconds for Serial port connections
        serialReconnectTime: 15000,
        // Retry time in milliseconds for TCP socket connections
        //socketReconnectTime: 10000,
        // Timeout in milliseconds for TCP server socket connections
        //  defaults to no timeout
        //socketTimeout: 120000,
        // Maximum number of messages to wait in queue while attempting to connect to TCP socket
        //  defaults to 1000
        //tcpMsgQueueSize: 2000,
        // Timeout in milliseconds for HTTP request connections
        //  defaults to 120 seconds
        //httpRequestTimeout: 120000,
        // The maximum length, in characters, of any message sent to the debug sidebar tab
        debugMaxLength: 1000,
        // The maximum number of messages nodes will buffer internally as part of their
        // operation. This applies across a range of nodes that operate on message sequences.
        //  defaults to no limit. A value of 0 also means no limit is applied.
        //nodeMessageBufferMaxLength: 0,
        // To disable the option for using local files for storing keys and certificates in the TLS configuration
        //  node, set this to true
        //tlsConfigDisableLocalFiles: true,
        // Colourise the console output of the debug node
        //debugUseColors: true,
        // The file containing the flows. If not set, it defaults to flows_<hostname>.json
        //flowFile: 'flows.json',
        // To enabled pretty-printing of the flow within the flow file, set the following
        //  property to true:
        //flowFilePretty: true,
        // By default, credentials are encrypted in storage using a generated key. To
        // specify your own secret, set the following property.
        // If you want to disable encryption of credentials, set this property to false.
        // Note: once you set this property, do not change it - doing so will prevent
        // node-red from being able to decrypt your existing credentials and they will be
        // lost.
        //credentialSecret: "a-secret-key",
        // By default, all user data is stored in a directory called `.node-red` under
        // the user's home directory. To use a different location, the following
        // property can be used
        //userDir: '/home/nol/.node-red/',
        // Node-RED scans the `nodes` directory in the userDir to find local node files.
        // The following property can be used to specify an additional directory to scan.
        //nodesDir: '/home/nol/.node-red/nodes',
        // By default, the Node-RED UI is available at http://localhost:1880/
        // The following property can be used to specify a different root path.
        // If set to false, this is disabled.
        //httpAdminRoot: '/admin',
        // Some nodes, such as HTTP In, can be used to listen for incoming http requests.
        // By default, these are served relative to '/'. The following property
        // can be used to specifiy a different root path. If set to false, this is
        // disabled.
        //httpNodeRoot: '/red-nodes',
        // The following property can be used in place of 'httpAdminRoot' and 'httpNodeRoot',
        // to apply the same root to both parts.
        httpRoot: '/nodered',
        // When httpAdminRoot is used to move the UI to a different root path, the
        // following property can be used to identify a directory of static content
        // that should be served at http://localhost:1880/.
        //httpStatic: '/home/nol/node-red-static/',
        // The maximum size of HTTP request that will be accepted by the runtime api.
        // Default: 5mb
        //apiMaxLength: '5mb',
        // If you installed the optional node-red-dashboard you can set it's path
        // relative to httpRoot
        ui: { path: "ui" },
        // Securing Node-RED
        // -----------------
        // To password protect the Node-RED editor and admin API, the following
        // property can be used. See http://nodered.org/docs/security.html for details.
        //adminAuth: {},
        // To password protect the node-defined HTTP endpoints (httpNodeRoot), or
        // the static content (httpStatic), the following properties can be used.
        // The pass field is a bcrypt hash of the password.
        // See http://nodered.org/docs/security.html#generating-the-password-hash
        //httpNodeAuth: {user:"user",pass:"$2a$08$zZWtXTja0fB1pzD4sHCMyOCMYz2Z6dNbM6tl8sJogENOMcxWV9DN."},
        //httpStaticAuth: {user:"user",pass:"$2a$08$zZWtXTja0fB1pzD4sHCMyOCMYz2Z6dNbM6tl8sJogENOMcxWV9DN."},
        // The following property can be used to enable HTTPS
        // See http://nodejs.org/api/https.html#https_https_createserver_options_requestlistener
        // for details on its contents.
        // This property can be either an object, containing both a (private) key and a (public) certificate,
        // or a function that returns such an object:
        //// https object:
        //https: {
        //  key: require("fs").readFileSync('privkey.pem'),
        //  cert: require("fs").readFileSync('cert.pem')
        //},
        ////https function:
        // https: function() {
        //     // This function should return the options object, or a Promise
        //     // that resolves to the options object
        //     return {
        //         key: require("fs").readFileSync('privkey.pem'),
        //         cert: require("fs").readFileSync('cert.pem')
        //     }
        // },
        // The following property can be used to refresh the https settings at a
        // regular time interval in hours.
        // This requires:
        //   - the `https` setting to be a function that can be called to get
        //     the refreshed settings.
        //   - Node.js 11 or later.
        //httpsRefreshInterval : 12,
        // The following property can be used to cause insecure HTTP connections to
        // be redirected to HTTPS.
        //requireHttps: true,
        // The following property can be used to disable the editor. The admin API
        // is not affected by this option. To disable both the editor and the admin
        // API, use either the httpRoot or httpAdminRoot properties
        //disableEditor: false,
        // The following property can be used to configure cross-origin resource sharing
        // in the HTTP nodes.
        // See https://github.com/troygoode/node-cors#configuration-options for
        // details on its contents. The following is a basic permissive set of options:
        //httpNodeCors: {
        //    origin: "*",
        //    methods: "GET,PUT,POST,DELETE"
        //},
        // If you need to set an http proxy please set an environment variable
        // called http_proxy (or HTTP_PROXY) outside of Node-RED in the operating system.
        // For example - http_proxy=http://myproxy.com:8080
        // (Setting it here will have no effect)
        // You may also specify no_proxy (or NO_PROXY) to supply a comma separated
        // list of domains to not proxy, eg - no_proxy=.acme.co,.acme.co.uk
        // The following property can be used to add a custom middleware function
        // in front of all http in nodes. This allows custom authentication to be
        // applied to all http in nodes, or any other sort of common request processing.
        //httpNodeMiddleware: function(req,res,next) {
        //    // Handle/reject the request, or pass it on to the http in node by calling next();
        //    // Optionally skip our rawBodyParser by setting this to true;
        //    //req.skipRawBodyParser = true;
        //    next();
        //},
        // The following property can be used to add a custom middleware function
        // in front of all admin http routes. For example, to set custom http
        // headers
        // httpAdminMiddleware: function(req,res,next) {
        //    // Set the X-Frame-Options header to limit where the editor
        //    // can be embedded
        //    //res.set('X-Frame-Options', 'sameorigin');
        //    next();
        // },
        // The following property can be used to pass custom options to the Express.js
        // server used by Node-RED. For a full list of available options, refer
        // to http://expressjs.com/en/api.html#app.settings.table
        //httpServerOptions: { },
        // The following property can be used to verify websocket connection attempts.
        // This allows, for example, the HTTP request headers to be checked to ensure
        // they include valid authentication information.
        //webSocketNodeVerifyClient: function(info) {
        //    // 'info' has three properties:
        //    //   - origin : the value in the Origin header
        //    //   - req : the HTTP request
        //    //   - secure : true if req.connection.authorized or req.connection.encrypted is set
        //    //
        //    // The function should return true if the connection should be accepted, false otherwise.
        //    //
        //    // Alternatively, if this function is defined to accept a second argument, callback,
        //    // it can be used to verify the client asynchronously.
        //    // The callback takes three arguments:
        //    //   - result : boolean, whether to accept the connection or not
        //    //   - code : if result is false, the HTTP error status to return
        //    //   - reason: if result is false, the HTTP reason string to return
        //},
        // The following property can be used to seed Global Context with predefined
        // values. This allows extra node modules to be made available with the
        // Function node.
        // For example,
        //    functionGlobalContext: { os:require('os') }
        // can be accessed in a function block as:
        //    global.get("os")
        functionGlobalContext: {
            // os:require('os'),
            // jfive:require("johnny-five"),
            // j5board:require("johnny-five").Board({repl:false})
        },
        // `global.keys()` returns a list of all properties set in global context.
        // This allows them to be displayed in the Context Sidebar within the editor.
        // In some circumstances it is not desirable to expose them to the editor. The
        // following property can be used to hide any property set in `functionGlobalContext`
        // from being list by `global.keys()`.
        // By default, the property is set to false to avoid accidental exposure of
        // their values. Setting this to true will cause the keys to be listed.
        exportGlobalContextKeys: false,
        // Context Storage
        // The following property can be used to enable context storage. The configuration
        // provided here will enable file-based context that flushes to disk every 30 seconds.
        // Refer to the documentation for further options: https://nodered.org/docs/api/context/
        //
        //contextStorage: {
        //    default: {
        //        module:"localfilesystem"
        //    },
        //},
        // The following property can be used to order the categories in the editor
        // palette. If a node's category is not in the list, the category will get
        // added to the end of the palette.
        // If not set, the following default order is used:
        //paletteCategories: ['subflows', 'common', 'function', 'network', 'sequence', 'parser', 'storage'],
        // Configure the logging output
        logging: {
            // Only console logging is currently supported
            console: {
                // Level of logging to be recorded. Options are:
                // fatal - only those errors which make the application unusable should be recorded
                // error - record errors which are deemed fatal for a particular request + fatal errors
                // warn - record problems which are non fatal + errors + fatal errors
                // info - record information about the general running of the application + warn + error + fatal errors
                // debug - record information which is more verbose than info + info + warn + error + fatal errors
                // trace - record very detailed logging + debug + info + warn + error + fatal errors
                // off - turn off all logging (doesn't affect metrics or audit)
                level: "info",
                // Whether or not to include metric events in the log output
                metrics: false,
                // Whether or not to include audit events in the log output
                audit: false
            }
        },
        // Customising the editor
        editorTheme: {
            projects: {
                // To enable the Projects feature, set this value to true
                enabled: false
            }
        }
    }


factoryinsight:
  image: unitedmanufacturinghub/factoryinsight
  # Only specify tag if you want to use a specific version. If not specified the latest stable version is automatically selected
  # tag: 0.3.2 
  user: ""
  password: ""
  db_host: ""
  db_database: "factoryinsight"
  db_user: "factoryinsight"
  db_password: ""
  service:
    annotations: {}
  pdb:
    enabled: true
    annotations: {}
    minAvailable: 2 
  hpa:
    enabled: true
    minReplicas: 2
    maxReplicas: 5 
  ingress:
    enabled: false
    publicHost: ""
    publicHostSecretName: ""
  resources:
    limits:
       cpu: 1000m         
    requests:
       cpu: 200m      


##### CONFIG FOR REDIS #####
redis:
  cluster:
    enabled: true
    slaveCount: 3
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      redis: {}
  configmap: |-
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
  global:
    redis: {}
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: bitnami/redis
    tag: 6.0.9-debian-10-r13
  master:
    affinity: {}
    command: /run.sh
    customLivenessProbe: {}
    customReadinessProbe: {}
    disableCommands:
    - FLUSHDB
    - FLUSHALL
    extraEnvVars: []
    extraEnvVarsCM: []
    extraEnvVarsSecret: []
    extraFlags:
    - --maxmemory 4gb
    hostAliases: []
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    persistence:
      accessModes:
      - ReadWriteOnce
      enabled: true
      matchExpressions: {}
      matchLabels: {}
      path: /data
      size: 8Gi
      subPath: ""
      volumes: null
    podAnnotations: {}
    podLabels: {}
    preExecCmds: ""
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 120
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits:
        memory: 4Gi
      requests:
        cpu: 100m
        memory: 1Gi
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      labels: {}
      port: 6379
      type: ClusterIP
    shareProcessNamespace: false
    statefulset:
      annotations: {}
      labels: {}
      updateStrategy: RollingUpdate
      volumeClaimTemplates:
        annotations: {}
        labels: {}
  metrics:
    enabled: true
    image:
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: bitnami/redis-exporter
      tag: 1.13.1-debian-10-r6
    podAnnotations:
      prometheus.io/port: "9121"
      prometheus.io/scrape: "true"
    priorityClassName: {}
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      labels: {}
      type: ClusterIP
    serviceMonitor:
      enabled: false
      metricRelabelings: []
      relabelings: []
      selector:
        prometheus: kube-prometheus
  networkPolicy:
    enabled: false
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  password: changeme 
  persistence: {}
  podDisruptionBudget:
    enabled: true
    minAvailable: 2
  podSecurityPolicy:
    create: false
  rbac:
    create: false
    role:
      rules: []
  redisPort: 6379
  securityContext:
    enabled: true
    fsGroup: 1001
  sentinel:
    customLivenessProbe: {}
    customReadinessProbe: {}
    downAfterMilliseconds: 1000
    enabled: true
    extraEnvVars: []
    extraEnvVarsCM: []
    extraEnvVarsSecret: []
    failoverTimeout: 18000
    image:
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: bitnami/redis-sentinel
      tag: 6.0.9-debian-10-r14
    initialCheckTimeout: 5
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    masterSet: mymaster
    parallelSyncs: 1
    port: 26379
    preExecCmds: ""
    quorum: 2
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 120
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      labels: {}
      redisPort: 6379
      sentinelPort: 26379
      type: ClusterIP
    staticID: false
    usePassword: true
  serviceAccount:
    create: false
  slave:
    affinity: {}
    command: /run.sh
    customLivenessProbe: {}
    customReadinessProbe: {}
    disableCommands:
    - FLUSHDB
    - FLUSHALL
    extraEnvVars: []
    extraEnvVarsCM: []
    extraEnvVarsSecret: []
    extraFlags: []
    hostAliases: []
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    persistence:
      accessModes:
      - ReadWriteOnce
      enabled: true
      matchExpressions: {}
      matchLabels: {}
      path: /data
      size: 8Gi
      subPath: ""
    podAnnotations: {}
    podLabels: {}
    port: 6379
    preExecCmds: ""
    priorityClassName: {}
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 10
    resources:
      limits:
        memory: 4Gi
      requests:
        cpu: 100m
        memory: 1Gi
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      labels: {}
      port: 6379
      type: ClusterIP
    shareProcessNamespace: false
    spreadConstraints: {}
    statefulset:
      annotations: {}
      labels: {}
      updateStrategy: RollingUpdate
      volumeClaimTemplates:
        annotations: {}
        labels: {}
  sysctlImage:
    command: []
    enabled: false
    mountHostSys: false
    pullPolicy: Always
    registry: docker.io
    repository: bitnami/minideb
    resources: {}
    tag: buster
  tls:
    authClients: true
    enabled: false
  usePassword: true
  usePasswordFile: false
  volumePermissions:
    enabled: false
    image:
      pullPolicy: Always
      registry: docker.io
      repository: bitnami/minideb
      tag: buster
    resources: {}
    securityContext:
      runAsUser: 0

##### CONFIG FOR VERNEMQ #####

vernemq:
  AclConfig: |-
     pattern write ia/raw/%u/#
     pattern write ia/%u/#
     pattern $SYS/broker/connection/%c/state

     user TESTING 
     topic ia/#
     topic $SYS/#
     topic read $share/TESTING/ia/#

     user ia_nodered
     topic ia/#
  CACert: |-
    ADDCERT
  Cert: |-
    ADDCERT
  Privkey: |-
    ADDCERT
  additionalEnv:
  - name: DOCKER_VERNEMQ_ALLOW_REGISTER_DURING_NETSPLIT
    value: "on"
  - name: DOCKER_VERNEMQ_ALLOW_PUBLISH_DURING_NETSPLIT
    value: "on"
  - name: DOCKER_VERNEMQ_ALLOW_SUBSCRIBE_DURING_NETSPLIT
    value: "on"
  - name: DOCKER_VERNEMQ_ALLOW_UNSUBSCRIBE_DURING_NETSPLIT
    value: "on"
  - name: DOCKER_VERNEMQ_ALLOW_ANONYMOUS
    value: "on"
  - name: DOCKER_VERNEMQ_MAX_ONLINE_MESSAGES
    value: "-1"
  - name: DOCKER_VERNEMQ_MAX_OFFLINE_MESSAGES
    value: "-1"
  - name: DOCKER_VERNEMQ_LISTENER__SSL__CAFILE
    value: /etc/ssl/vernemq/ca.crt
  - name: DOCKER_VERNEMQ_LISTENER__SSL__CERTFILE
    value: /etc/ssl/vernemq/tls.crt
  - name: DOCKER_VERNEMQ_LISTENER__SSL__KEYFILE
    value: /etc/ssl/vernemq/tls.key
  - name: DOCKER_VERNEMQ_ACCEPT_EULA
    value: "yes"
  - name: DOCKER_VERNEMQ_LISTENER__SSL__DEFAULT__USE_IDENTITY_AS_USERNAME
    value: "on"
  - name: DOCKER_VERNEMQ_LISTENER__SSL__DEFAULT__REQUIRE_CERTIFICATE
    value: "on"
  extraVolumeMounts:
  - mountPath: /vernemq/etc/vmq.acl
    name: vernemq-acl
    readOnly: true
    subPath: vernemq-acl
  extraVolumes:
  - configMap:
      name: vernemq-acl
    name: vernemq-acl
  fullnameOverride: ""
  image:
    pullPolicy: Always
    repository: vernemq/vernemq
    tag: latest
  ingress:
    annotations: {}
    enabled: false
    hosts: []
    labels: {}
    paths:
    - /
    tls: []
  nameOverride: ""
  nodeSelector: {}
  pdb:
    enabled: true
    minAvailable: 1
  persistentVolume:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: false
    size: 5Gi
  podAntiAffinity: soft
  rbac:
    create: true
    serviceAccount:
      create: true
  replicaCount: 3 
  resources: {}
  secretMounts:
  - name: vernemq-certificates
    path: /etc/ssl/vernemq
    secretName: vernemq-certificates-secret
  securityContext:
    fsGroup: 10000
    runAsGroup: 10000
    runAsUser: 10000
  service:
    annotations:
      prometheus.io/port: "8888"
      prometheus.io/scrape: "true"
    labels: {}
    mqtt:
      enabled: false
      nodePort: 1883
      port: 1883
    mqtts:
      enabled: true
      nodePort: 8883
      port: 8883
    type: LoadBalancer
    ws:
      enabled: false
      nodePort: 8080
      port: 8080
    wss:
      enabled: false
      nodePort: 8443
      port: 8443
  serviceMonitor:
    create: false 
  statefulset:
    annotations: {}
    labels: {}
    lifecycle: {}
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    podAnnotations: {}
    podManagementPolicy: OrderedReady
    prometheus.io/port: "8888"
    prometheus.io/scrape: "true"
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 60
    updateStrategy: RollingUpdate
  tolerations: []

